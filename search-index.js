var searchIndex = {};
searchIndex["ftp"] = {"doc":"ftp is an FTP client written in Rust.","items":[[3,"FtpStream","ftp","Stream to interface with the FTP server. This interface is only for the command stream.",null,null],[11,"new","regex::re_unicode","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",0,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",0,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",0,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",0,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",0,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",0,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",0,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",0,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",0,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",0,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",0,null],[11,"shortest_match","","Returns the end location of a match in the text given.",0,null],[11,"as_str","","Returns the original string of this regex.",0,null],[11,"capture_names","","Returns an iterator over the capture names.",0,null],[11,"captures_len","","Returns the number of captures.",0,null],[11,"fmt","regex::error","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::re_builder::bytes","Create a new regular expression builder with the given pattern.",2,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",2,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",2,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",2,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",2,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",2,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",2,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",2,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",2,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",2,null],[11,"new","regex::re_builder::unicode","Create a new regular expression builder with the given pattern.",3,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",3,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",3,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",3,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",3,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",3,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",3,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",3,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",3,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",3,null],[11,"clone","regex::re_bytes","",4,null],[11,"fmt","","Shows the original regular expression.",4,null],[11,"fmt","","Shows the original regular expression.",4,null],[11,"from_str","","Attempts to parse a string into a regular expression",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",4,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",4,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",4,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",4,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",4,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",4,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",4,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",4,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",4,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",4,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",4,null],[11,"shortest_match","","Returns the end location of a match in the text given.",4,null],[11,"as_str","","Returns the original string of this regex.",4,null],[11,"capture_names","","Returns an iterator over the capture names.",4,null],[11,"captures_len","","Returns the number of captures.",4,null],[11,"next","","",5,null],[11,"next","","",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",10,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",10,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",10,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",10,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",10,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",10,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",10,null],[11,"len","","Returns the number of captured groups.",10,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",10,null],[11,"fmt","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"next","","",13,null],[11,"replace_append","","",14,null],[11,"no_expansion","","",14,null],[11,"clone","regex::re_set::unicode","",15,null],[11,"new","","Create a new regex set with the given regular expressions.",15,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",15,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",15,null],[11,"len","","Returns the total number of regular expressions in this set.",15,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"matched_any","","Whether this set contains any matches.",16,null],[11,"matched","","Whether the regex at the given index matched.",16,null],[11,"len","","The total number of regexes in the set that created these matches.",16,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",16,null],[11,"into_iter","","",16,null],[11,"next","","",17,null],[11,"clone","","",18,null],[11,"next","","",18,null],[11,"fmt","","",15,null],[11,"clone","regex::re_set::bytes","",19,null],[11,"new","","Create a new regex set with the given regular expressions.",19,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",19,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,null],[11,"len","","Returns the total number of regular expressions in this set.",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"matched_any","","Whether this set contains any matches.",20,null],[11,"matched","","Whether the regex at the given index matched.",20,null],[11,"len","","The total number of regexes in the set that created these matches.",20,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,null],[11,"into_iter","","",20,null],[11,"next","","",21,null],[11,"clone","","",22,null],[11,"next","","",22,null],[11,"fmt","","",19,null],[11,"clone","regex::re_unicode","",0,null],[11,"fmt","","Shows the original regular expression.",0,null],[11,"fmt","","Shows the original regular expression.",0,null],[11,"eq","","",0,null],[11,"from_str","","Attempts to parse a string into a regular expression",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"reg_replace","","",24,null],[11,"no_expand","","",24,null],[11,"next","","",25,null],[11,"next","","",26,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",27,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",27,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",27,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",27,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",27,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",27,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",27,null],[11,"len","","Returns the number of captured groups.",27,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",27,null],[11,"fmt","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"next","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"fmt","ftp","",33,null],[11,"connect","","Creates an FTP Stream.",33,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"login","","Log in to the FTP server.",33,null],[11,"cwd","","Change the current directory to the path specified.",33,null],[11,"cdup","","Move the current directory to the parent directory.",33,null],[11,"pwd","","Gets the current directory",33,null],[11,"noop","","This does nothing. This is usually just used to keep the connection open.",33,null],[11,"mkdir","","This creates a new directory on the server.",33,null],[11,"transfer_type","","Sets the type of file to be transferred. That is the implementation\nof `TYPE` command.",33,null],[11,"quit","","Quits the current FTP session.",33,null],[11,"get","","Retrieves the file name specified from the server.\nThis method is a more complicated way to retrieve a file.\nThe reader returned should be dropped.\nAlso you will have to read the response to make sure it has the correct value.",33,null],[11,"rename","","Renames the file from_name to to_name",33,null],[11,"retr","","The implementation of `RETR` command where `filename` is the name of the file\nto download from FTP and `reader` is the function which operates with the\ndata stream opened.",33,null],[11,"simple_retr","","Simple way to retr a file from the server. This stores the file in memory.",33,null],[11,"rmdir","","Removes the remote pathname from the server.",33,null],[11,"put","","This stores a file on the server.",33,null],[11,"list","","Execute `LIST` command which returns the detailed file listing in human readable format.\nIf `pathname` is omited then the list of files in the current directory will be\nreturned otherwise it will the list of files on `pathname`.",33,null],[11,"nlst","","Execute `NLST` command which returns the list of file names only.\nIf `pathname` is omited then the list of files in the current directory will be\nreturned otherwise it will the list of files on `pathname`.",33,null],[11,"mdtm","","Retrieves the modification time of the file at `pathname` if it exists.\nIn case the file does not exist `None` is returned.",33,null],[11,"size","","Retrieves the size of the file in bytes at `pathname` if it exists.\nIn case the file does not exist `None` is returned.",33,null],[11,"read_response","","",33,null],[11,"read_response_in","","Retrieve single line response",33,null],[0,"types","","The set of valid values for FTP commands",null,null],[4,"FormatControl","ftp::types","Text Format Control used in `TYPE` command",null,null],[13,"Default","","Default text format control (is NonPrint)",34,null],[13,"NonPrint","","Non-print (not destined for printing)",34,null],[13,"Telnet","","Telnet format control (\\&lt;CR\\&gt;, \\&lt;FF\\&gt;, etc.)",34,null],[13,"Asa","","ASA (Fortran) Carriage Control",34,null],[4,"FileType","","File Type used in `TYPE` command",null,null],[13,"Ascii","","ASCII text (the argument is the text format control)",35,null],[13,"Ebcdic","","EBCDIC text (the argument is the text format control)",35,null],[13,"Image","","Image,",35,null],[13,"Binary","","Binary (the synonym to Image)",35,null],[13,"Local","","Local format (the argument is the number of bits in one byte on local machine)",35,null],[11,"cmp","","",34,null],[11,"partial_cmp","","",34,null],[11,"eq","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"cmp","","",35,null],[11,"partial_cmp","","",35,null],[11,"lt","","",35,null],[11,"le","","",35,null],[11,"gt","","",35,null],[11,"ge","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"to_string","","",34,null],[11,"to_string","","",35,null],[0,"status","ftp","",null,null],[17,"INITIATING","ftp::status","",null,null],[17,"RESTART_MARKER","","",null,null],[17,"READY_MINUTE","","",null,null],[17,"ALREADY_OPEN","","",null,null],[17,"ABOUT_TO_SEND","","",null,null],[17,"COMMAND_OK","","",null,null],[17,"COMMAND_NOT_IMPLEMENTED","","",null,null],[17,"SYSTEM","","",null,null],[17,"DIRECTORY","","",null,null],[17,"FILE","","",null,null],[17,"HELP","","",null,null],[17,"NAME","","",null,null],[17,"READY","","",null,null],[17,"CLOSING","","",null,null],[17,"DATA_CONNECTION_OPEN","","",null,null],[17,"CLOSING_DATA_CONNECTION","","",null,null],[17,"PASSIVE_MODE","","",null,null],[17,"LONG_PASSIVE_MODE","","",null,null],[17,"EXTENDED_PASSIVE_MODE","","",null,null],[17,"LOGGED_IN","","",null,null],[17,"LOGGED_OUT","","",null,null],[17,"LOGOUT_ACK","","",null,null],[17,"AUTH_OK","","",null,null],[17,"REQUESTED_FILE_ACTION_OK","","",null,null],[17,"PATH_CREATED","","",null,null],[17,"NEED_PASSWORD","","",null,null],[17,"LOGIN_NEED_ACCOUNT","","",null,null],[17,"REQUEST_FILE_PENDING","","",null,null],[17,"NOT_AVAILABLE","","",null,null],[17,"CANNOT_OPEN_DATA_CONNECTION","","",null,null],[17,"TRANSER_ABORTED","","",null,null],[17,"INVALID_CREDENTIALS","","",null,null],[17,"HOST_UNAVAILABLE","","",null,null],[17,"REQUEST_FILE_ACTION_IGNORED","","",null,null],[17,"ACTION_ABORTED","","",null,null],[17,"REQUESTED_ACTION_NOT_TAKEN","","",null,null],[17,"BAD_COMMAND","","",null,null],[17,"BAD_ARGUMENTS","","",null,null],[17,"NOT_IMPLEMENTED","","",null,null],[17,"BAD_SEQUENCE","","",null,null],[17,"NOT_IMPLEMENTED_PARAMETER","","",null,null],[17,"NOT_LOGGED_IN","","",null,null],[17,"STORING_NEED_ACCOUNT","","",null,null],[17,"FILE_UNAVAILABLE","","",null,null],[17,"PAGE_TYPE_UNKNOWN","","",null,null],[17,"EXCEEDED_STORAGE","","",null,null],[17,"BAD_FILENAME","","",null,null]],"paths":[[3,"Regex"],[4,"Error"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"FtpStream"],[4,"FormatControl"],[4,"FileType"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","regex::bytes","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.22","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,null],[11,"num_days","","Returns the total number of whole days in the duration.",0,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,null],[11,"fmt","time","",1,null],[11,"fmt","time::duration","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"hash","time","",3,null],[11,"fmt","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"clone","","",4,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"clone","","",5,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"add","","",5,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"add","","The resulting Tm is in UTC.",6,null],[11,"sub","","The resulting Tm is in UTC.",6,null],[11,"sub","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,null],[11,"to_local","","Convert time to the local timezone",6,null],[11,"to_utc","","Convert time to the UTC",6,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,null],[11,"strftime","","Formats the time according to the format string.",6,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",1,null],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",8,null],[13,"Tue","","Tuesday.",8,null],[13,"Wed","","Wednesday.",8,null],[13,"Thu","","Thursday.",8,null],[13,"Fri","","Friday.",8,null],[13,"Sat","","Saturday.",8,null],[13,"Sun","","Sunday.",8,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",9,null],[13,"Single","","Given local time representation has a single unique result.",9,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",9,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"today","","Returns a `Date` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",10,null],[11,"offset_from_local_datetime","","",10,null],[11,"offset_from_utc_date","","",10,null],[11,"offset_from_utc_datetime","","",10,null],[11,"local_minus_utc","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",11,null],[11,"offset_from_local_datetime","","",11,null],[11,"offset_from_utc_date","","",11,null],[11,"offset_from_utc_datetime","","",11,null],[11,"local_minus_utc","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",12,null],[11,"today","","Returns a `Date` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",12,null],[11,"offset_from_local_datetime","","",12,null],[11,"offset_from_utc_date","","",12,null],[11,"offset_from_utc_datetime","","",12,null],[11,"from_local_date","","",12,null],[11,"from_local_datetime","","",12,null],[11,"from_utc_date","","",12,null],[11,"from_utc_datetime","","",12,null],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",13,null],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",14,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",14,null],[10,"from_offset","","Reconstructs the time zone from the offset.",14,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",14,null],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",14,null],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",14,null],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",14,null],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",14,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",14,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",9,null],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",9,null],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",9,null],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",9,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",9,null],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",15,null],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"succ","","Makes a new `NaiveDate` for the next date.",15,null],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",15,null],[11,"pred","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",15,null],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",15,null],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",15,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,null],[11,"year","","",15,null],[11,"month","","",15,null],[11,"month0","","",15,null],[11,"day","","",15,null],[11,"day0","","",15,null],[11,"ordinal","","",15,null],[11,"ordinal0","","",15,null],[11,"weekday","","",15,null],[11,"isoweekdate","","",15,null],[11,"with_year","","",15,null],[11,"with_month","","",15,null],[11,"with_month0","","",15,null],[11,"with_day","","",15,null],[11,"with_day0","","",15,null],[11,"with_ordinal","","",15,null],[11,"with_ordinal0","","",15,null],[11,"hash","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,null],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,null],[11,"hour","","",16,null],[11,"minute","","",16,null],[11,"second","","",16,null],[11,"nanosecond","","",16,null],[11,"with_hour","","",16,null],[11,"with_minute","","",16,null],[11,"with_second","","",16,null],[11,"with_nanosecond","","",16,null],[11,"num_seconds_from_midnight","","",16,null],[11,"hash","","",16,null],[11,"add","","",16,null],[11,"sub","","",16,null],[11,"sub","","",16,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",17,null],[11,"cmp","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",17,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",17,null],[11,"time","","Retrieves a time component.",17,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",17,null],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",17,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",17,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",17,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",17,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,null],[11,"year","","",17,null],[11,"month","","",17,null],[11,"month0","","",17,null],[11,"day","","",17,null],[11,"day0","","",17,null],[11,"ordinal","","",17,null],[11,"ordinal0","","",17,null],[11,"weekday","","",17,null],[11,"isoweekdate","","",17,null],[11,"with_year","","",17,null],[11,"with_month","","",17,null],[11,"with_month0","","",17,null],[11,"with_day","","",17,null],[11,"with_day0","","",17,null],[11,"with_ordinal","","",17,null],[11,"with_ordinal0","","",17,null],[11,"hour","","",17,null],[11,"minute","","",17,null],[11,"second","","",17,null],[11,"nanosecond","","",17,null],[11,"with_hour","","",17,null],[11,"with_minute","","",17,null],[11,"with_second","","",17,null],[11,"with_nanosecond","","",17,null],[11,"hash","","",17,null],[11,"add","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",18,null],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",18,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",18,null],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"succ","","Makes a new `Date` for the next date.",18,null],[11,"succ_opt","","Makes a new `Date` for the next date.",18,null],[11,"pred","","Makes a new `Date` for the prior date.",18,null],[11,"pred_opt","","Makes a new `Date` for the prior date.",18,null],[11,"offset","","Retrieves an associated offset from UTC.",18,null],[11,"timezone","","Retrieves an associated time zone.",18,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",18,null],[11,"checked_add","","Adds given `Duration` to the current date.",18,null],[11,"checked_sub","","Subtracts given `Duration` from the current date.",18,null],[11,"naive_utc","","Returns a view to the naive UTC date.",18,null],[11,"naive_local","","Returns a view to the naive local date.",18,null],[11,"format_with_items","","Formats the date with the specified formatting items.",18,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",18,null],[11,"year","","",18,null],[11,"month","","",18,null],[11,"month0","","",18,null],[11,"day","","",18,null],[11,"day0","","",18,null],[11,"ordinal","","",18,null],[11,"ordinal0","","",18,null],[11,"weekday","","",18,null],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,null],[11,"with_month","","",18,null],[11,"with_month0","","",18,null],[11,"with_day","","",18,null],[11,"with_day0","","",18,null],[11,"with_ordinal","","",18,null],[11,"with_ordinal0","","",18,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"hash","","",18,null],[11,"add","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",19,null],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",19,null],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",19,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",19,null],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",19,null],[11,"offset","","Retrieves an associated offset from UTC.",19,null],[11,"timezone","","Retrieves an associated time zone.",19,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",19,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",19,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",19,null],[11,"naive_utc","","Returns a view to the naive UTC datetime.",19,null],[11,"naive_local","","Returns a view to the naive local datetime.",19,null],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",19,null],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",19,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",19,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,null],[11,"year","","",19,null],[11,"month","","",19,null],[11,"month0","","",19,null],[11,"day","","",19,null],[11,"day0","","",19,null],[11,"ordinal","","",19,null],[11,"ordinal0","","",19,null],[11,"weekday","","",19,null],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,null],[11,"with_month","","",19,null],[11,"with_month0","","",19,null],[11,"with_day","","",19,null],[11,"with_day0","","",19,null],[11,"with_ordinal","","",19,null],[11,"with_ordinal0","","",19,null],[11,"hour","","",19,null],[11,"minute","","",19,null],[11,"second","","",19,null],[11,"nanosecond","","",19,null],[11,"with_hour","","",19,null],[11,"with_minute","","",19,null],[11,"with_second","","",19,null],[11,"with_nanosecond","","",19,null],[11,"eq","","",19,null],[11,"partial_cmp","","",19,null],[11,"cmp","","",19,null],[11,"hash","","",19,null],[11,"add","","",19,null],[11,"sub","","",19,null],[11,"sub","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",20,null],[13,"Zero","","Zero (`0`) padding.",20,null],[13,"Space","","Space padding.",20,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",21,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",21,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"Month","","Month (FW=PW=2).",21,null],[13,"Day","","Day of the month (FW=PW=2).",21,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",21,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",21,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",21,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",21,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",21,null],[13,"Ordinal","","Day of the year (FW=PW=3).",21,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",21,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",21,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",21,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",21,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",21,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",21,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",22,null],[13,"LongMonthName","","Full month names.",22,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",22,null],[13,"LongWeekdayName","","Full day of the week names.",22,null],[13,"LowerAmPm","","AM/PM.",22,null],[13,"UpperAmPm","","AM/PM.",22,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",22,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",22,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",22,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",22,null],[13,"TimezoneName","","Timezone name.",22,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",22,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",22,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",22,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",22,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",22,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",22,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",23,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",23,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",23,null],[13,"Fixed","","Fixed-format item.",23,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",23,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",24,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",24,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"month","","Month (1--12).",24,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",24,null],[12,"weekday","","Day of the week.",24,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",24,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",24,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",24,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",24,null],[12,"minute","","Minute number (0--59).",24,null],[12,"second","","Second number (0--60, accounting for leap seconds).",24,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",24,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",24,null],[12,"offset","","Offset from the local time to UTC, in seconds.",24,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"new","","Returns the initial value of parsed parts.",24,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",24,null],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",24,null],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",24,null],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",24,null],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",24,null],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",24,null],[11,"set_month","","Tries to set the `month` field from given value.",24,null],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",24,null],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",24,null],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",24,null],[11,"set_weekday","","Tries to set the `weekday` field from given value.",24,null],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",24,null],[11,"set_day","","Tries to set the `day` field from given value.",24,null],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",24,null],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",24,null],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",24,null],[11,"set_minute","","Tries to set the `minute` field from given value.",24,null],[11,"set_second","","Tries to set the `second` field from given value.",24,null],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",24,null],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",24,null],[11,"set_offset","","Tries to set the `offset` field from given value.",24,null],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",24,null],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",24,null],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",24,null],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",24,null],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",24,null],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",24,null],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",25,null],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",25,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",25,null],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"fmt","","",26,null],[11,"description","","",26,null],[11,"fmt","","",27,null],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",27,null],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",28,null],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",28,null],[10,"month","","Returns the month number starting from 1.",28,null],[10,"month0","","Returns the month number starting from 0.",28,null],[10,"day","","Returns the day of month starting from 1.",28,null],[10,"day0","","Returns the day of month starting from 0.",28,null],[10,"ordinal","","Returns the day of year starting from 1.",28,null],[10,"ordinal0","","Returns the day of year starting from 0.",28,null],[10,"weekday","","Returns the day of week.",28,null],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",28,null],[10,"with_year","","Makes a new value with the year number changed.",28,null],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",28,null],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",28,null],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",28,null],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",28,null],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",28,null],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",28,null],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",28,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",29,null],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",29,null],[10,"minute","","Returns the minute number from 0 to 59.",29,null],[10,"second","","Returns the second number from 0 to 59.",29,null],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",29,null],[10,"with_hour","","Makes a new value with the hour number changed.",29,null],[10,"with_minute","","Makes a new value with the minute number changed.",29,null],[10,"with_second","","Makes a new value with the second number changed.",29,null],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",29,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",29,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"succ","","The next day in the week.",8,null],[11,"pred","","The previous day in the week.",8,null],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",8,null],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",8,null],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",8,null],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",8,null],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",1,null],[11,"fmt","","",2,null],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",33,null],[12,"pw_passwd","","",33,null],[12,"pw_uid","","",33,null],[12,"pw_gid","","",33,null],[12,"pw_gecos","","",33,null],[12,"pw_dir","","",33,null],[12,"pw_shell","","",33,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_frsize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_favail","","",34,null],[12,"f_fsid","","",34,null],[12,"f_flag","","",34,null],[12,"f_namemax","","",34,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",35,null],[12,"dqb_bsoftlimit","","",35,null],[12,"dqb_curspace","","",35,null],[12,"dqb_ihardlimit","","",35,null],[12,"dqb_isoftlimit","","",35,null],[12,"dqb_curinodes","","",35,null],[12,"dqb_btime","","",35,null],[12,"dqb_itime","","",35,null],[12,"dqb_valid","","",35,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",36,null],[12,"ssi_errno","","",36,null],[12,"ssi_code","","",36,null],[12,"ssi_pid","","",36,null],[12,"ssi_uid","","",36,null],[12,"ssi_fd","","",36,null],[12,"ssi_tid","","",36,null],[12,"ssi_band","","",36,null],[12,"ssi_overrun","","",36,null],[12,"ssi_trapno","","",36,null],[12,"ssi_status","","",36,null],[12,"ssi_int","","",36,null],[12,"ssi_ptr","","",36,null],[12,"ssi_utime","","",36,null],[12,"ssi_stime","","",36,null],[12,"ssi_addr","","",36,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",37,null],[12,"mq_maxmsg","","",37,null],[12,"mq_msgsize","","",37,null],[12,"mq_curmsgs","","",37,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",38,null],[12,"sa_mask","","",38,null],[12,"sa_flags","","",38,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",39,null],[12,"ss_flags","","",39,null],[12,"ss_size","","",39,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",40,null],[12,"si_errno","","",40,null],[12,"si_code","","",40,null],[12,"_pad","","",40,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"ucred","","",null,null],[12,"pid","","",42,null],[12,"uid","","",42,null],[12,"gid","","",42,null],[3,"statfs","","",null,null],[12,"f_type","","",43,null],[12,"f_bsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_fsid","","",43,null],[12,"f_namelen","","",43,null],[12,"f_frsize","","",43,null],[3,"msghdr","","",null,null],[12,"msg_name","","",44,null],[12,"msg_namelen","","",44,null],[12,"msg_iov","","",44,null],[12,"msg_iovlen","","",44,null],[12,"msg_control","","",44,null],[12,"msg_controllen","","",44,null],[12,"msg_flags","","",44,null],[3,"termios","","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[3,"flock","","",null,null],[12,"l_type","","",46,null],[12,"l_whence","","",46,null],[12,"l_start","","",46,null],[12,"l_len","","",46,null],[12,"l_pid","","",46,null],[3,"ipc_perm","","",null,null],[12,"__key","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[12,"cuid","","",47,null],[12,"cgid","","",47,null],[12,"mode","","",47,null],[12,"__seq","","",47,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",48,null],[12,"shm_segsz","","",48,null],[12,"shm_atime","","",48,null],[12,"shm_dtime","","",48,null],[12,"shm_ctime","","",48,null],[12,"shm_cpid","","",48,null],[12,"shm_lpid","","",48,null],[12,"shm_nattch","","",48,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",49,null],[12,"loads","","",49,null],[12,"totalram","","",49,null],[12,"freeram","","",49,null],[12,"sharedram","","",49,null],[12,"bufferram","","",49,null],[12,"totalswap","","",49,null],[12,"freeswap","","",49,null],[12,"procs","","",49,null],[12,"pad","","",49,null],[12,"totalhigh","","",49,null],[12,"freehigh","","",49,null],[12,"mem_unit","","",49,null],[12,"_f","","",49,null],[3,"stat","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"stat64","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_nlink","","",51,null],[12,"st_mode","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",52,null],[12,"exponent","","",52,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",53,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",54,null],[12,"swd","","",54,null],[12,"ftw","","",54,null],[12,"fop","","",54,null],[12,"rip","","",54,null],[12,"rdp","","",54,null],[12,"mxcsr","","",54,null],[12,"mxcr_mask","","",54,null],[12,"_st","","",54,null],[12,"_xmm","","",54,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",55,null],[12,"fpregs","","",55,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",56,null],[12,"uc_link","","",56,null],[12,"uc_stack","","",56,null],[12,"uc_mcontext","","",56,null],[12,"uc_sigmask","","",56,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",57,null],[11,"is_none","","Returns `true` if the option is a `None` value",57,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",57,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",57,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",57,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",57,null],[11,"unwrap_or","","Returns the contained value or a default.",57,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",57,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",57,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",57,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",57,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",57,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",57,null],[11,"iter","","Returns an iterator over the possibly contained value.",57,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",57,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",57,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",57,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",57,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",57,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",57,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",57,null],[11,"unwrap_or_default","","Returns the contained value or a default",57,null],[11,"hash","core::num","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"eq","core::num::dec2flt","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"fmt","core::num","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"hash","core::nonzero","",63,null],[11,"fmt","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",63,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",63,null],[11,"new","core::ptr","Creates a new `Unique`.",64,null],[11,"get","","Dereferences the content.",64,null],[11,"get_mut","","Mutably dereferences the content.",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"new","","Creates a new `Shared`.",65,null],[11,"clone","","",65,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::marker","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"clone","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"contains","","# Examples",70,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"from","","",71,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",71,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","core::cmp","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"reverse","","Reverse the `Ordering`.",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","libc","",74,null],[11,"fmt","","",74,null],[11,"is","","Returns true if the boxed type is the same as `T`",74,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"is","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,null],[11,"hash","core::any","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",75,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",76,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",76,null],[11,"store","","Stores a value into the bool.",76,null],[11,"swap","","Stores a value into the bool, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",76,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",76,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",76,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",76,null],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",89,null],[11,"set","","Sets the contained value.",89,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"fmt","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,null],[11,"borrow_state","","Query the current state of this `RefCell`",91,null],[11,"borrow","","Immutably borrows the wrapped value.",91,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"deref","","",92,null],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,null],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"last","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","","",98,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","core::iter::range","",99,null],[11,"clone","","",99,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",69,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"next","core::iter::range","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","core::ops","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","core::iter::sources","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"len","","",102,null],[11,"fmt","core::iter","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"hash","core::option","",57,null],[11,"fmt","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",57,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",57,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,null],[11,"clone","","",125,null],[11,"hash","core::result","",126,null],[11,"fmt","","",126,null],[11,"cmp","","",126,null],[11,"partial_cmp","","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"is_ok","","Returns true if the result is `Ok`",126,null],[11,"is_err","","Returns true if the result is `Err`",126,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",126,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",126,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",126,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",126,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",126,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",126,null],[11,"iter","","Returns an iterator over the possibly contained value.",126,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",126,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",126,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",126,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",126,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",126,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",130,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"count","","",130,null],[11,"nth","","",130,null],[11,"last","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"count","","",131,null],[11,"nth","","",131,null],[11,"last","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"count","","",139,null],[11,"nth","","",139,null],[11,"last","","",139,null],[11,"next_back","","",139,null],[11,"fmt","","",140,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"count","","",140,null],[11,"nth","","",140,null],[11,"last","","",140,null],[11,"next_back","","",140,null],[11,"fmt","core::str::pattern","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_reject","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"next_reject_back","","",143,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_reject","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"next_reject_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"haystack","","",145,null],[11,"next","","",145,null],[11,"next_match","","",145,null],[11,"next_back","","",145,null],[11,"next_match_back","","",145,null],[11,"eq","core::str","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,null],[11,"fmt","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"as_str","","View the underlying data as a subslice of the original data.",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"as_str","","View the underlying data as a subslice of the original data.",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"count","","",150,null],[11,"last","","",150,null],[11,"nth","","",150,null],[11,"next_back","","",150,null],[11,"len","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"fmt","","",162,null],[11,"clone","","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"fmt","core::hash::sip","",164,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",164,null],[11,"finish","","",164,null],[11,"clone","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",165,null],[11,"build_hasher","","",165,null],[11,"clone","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",166,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"field","","Adds a new field to the generated tuple struct output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the set output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"entry","","Adds a new entry to the list output.",170,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"entry","","Adds a new entry to the map output.",171,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"partial_cmp","core::fmt","",172,null],[11,"eq","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",174,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",174,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",174,null],[11,"write_fmt","","Writes some formatted information into this instance",174,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",174,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",174,null],[11,"align","","Flag indicating what form of alignment was requested",174,null],[11,"width","","Optionally specified integer width that the output should be",174,null],[11,"precision","","Optionally specified precision for numeric types",174,null],[11,"sign_plus","","Determines if the `+` flag was specified.",174,null],[11,"sign_minus","","Determines if the `-` flag was specified.",174,null],[11,"alternate","","Determines if the `#` flag was specified.",174,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",174,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",174,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",174,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",174,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",174,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",174,null],[11,"write_str","","",174,null],[11,"write_char","","",174,null],[11,"write_fmt","","",174,null],[11,"fmt","","",172,null],[11,"fmt","core::marker","",66,null],[11,"fmt","core::cell","",89,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",175,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",175,null],[11,"clone","libc","",50,null],[11,"clone","","",51,null],[11,"clone","","",176,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",177,null],[11,"clone","","",49,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",178,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",181,null],[11,"clone","","",182,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",183,null],[11,"clone","","",37,null],[11,"clone","","",184,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",185,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,null],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,null],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,null],[11,"len","","Returns the length of the binary heap.",8,null],[11,"is_empty","","Checks if the binary heap is empty.",8,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,null],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,null],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"drop","collections::btree::map","",12,null],[11,"clone","","",12,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",12,null],[11,"get","","Returns a reference to the value corresponding to the key.",12,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,null],[11,"insert","","Inserts a key-value pair into the map.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",12,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"len","","",13,null],[11,"clone","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"len","","",14,null],[11,"into_iter","","",12,null],[11,"drop","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"clone","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"len","","",17,null],[11,"clone","","",17,null],[11,"next","","",18,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"len","","",19,null],[11,"next_back","","",18,null],[11,"clone","","",18,null],[11,"next","","",20,null],[11,"next_back","","",20,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",12,null],[11,"extend","","",12,null],[11,"hash","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",12,null],[11,"partial_cmp","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",12,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",12,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",12,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",12,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",12,null],[11,"len","","Returns the number of elements in the map.",12,null],[11,"is_empty","","Returns true if the map contains no elements.",12,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",21,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",21,null],[11,"key","","Returns a reference to this entry&#39;s key.",21,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",22,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",22,null],[11,"key","","Gets a reference to the key in the entry.",23,null],[11,"get","","Gets a reference to the value in the entry.",23,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",23,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",23,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",23,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",23,null],[11,"partial_cmp","collections::btree::set","",24,null],[11,"lt","","",24,null],[11,"le","","",24,null],[11,"gt","","",24,null],[11,"ge","","",24,null],[11,"cmp","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[11,"clone","","",24,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",24,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",24,null],[11,"difference","","Visits the values representing the difference, in ascending order.",24,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",24,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",24,null],[11,"union","","Visits the values representing the union, in ascending order.",24,null],[11,"len","","Returns the number of elements in the set.",24,null],[11,"is_empty","","Returns true if the set contains no elements.",24,null],[11,"clear","","Clears the set, removing all values.",24,null],[11,"contains","","Returns `true` if the set contains a value.",24,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",24,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",24,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",24,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",24,null],[11,"insert","","Adds a value to the set.",24,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",24,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",24,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",24,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",24,null],[11,"extend","","",24,null],[11,"extend","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next_back","","",25,null],[11,"len","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"next_back","","",26,null],[11,"len","","",26,null],[11,"clone","","",27,null],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",28,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"clone","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"borrow","collections::borrow","",32,null],[11,"clone","","",32,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",32,null],[11,"into_owned","","Extracts the owned data.",32,null],[11,"deref","","",32,null],[11,"cmp","","",32,null],[11,"eq","","",32,null],[11,"partial_cmp","","",32,null],[11,"fmt","","",32,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"as_ref","","",32,null],[11,"hash","collections::enum_set","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"new","","Returns an empty `EnumSet`.",33,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",33,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",33,null],[11,"clear","","",33,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",33,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",33,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",33,null],[11,"union","","Returns the union of both `EnumSets`.",33,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",33,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",33,null],[11,"remove","","Removes an enum from the EnumSet",33,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",33,null],[11,"iter","","Returns an iterator over an `EnumSet`.",33,null],[11,"sub","","",33,null],[11,"bitor","","",33,null],[11,"bitand","","",33,null],[11,"bitxor","","",33,null],[11,"clone","","",34,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"clone","collections::linked_list","",35,null],[11,"clone","","",36,null],[11,"default","","",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",37,null],[11,"iter","","Provides a forward iterator.",37,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",37,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",37,null],[11,"len","","Returns the length of the `LinkedList`.",37,null],[11,"clear","","Removes all elements from the `LinkedList`.",37,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",37,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",37,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",37,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",37,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",37,null],[11,"push_front","","Adds an element first in the list.",37,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",37,null],[11,"push_back","","Appends an element to the back of a list",37,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",37,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",37,null],[11,"front_place","","Returns a place for insertion at the front of the list.",37,null],[11,"back_place","","Returns a place for insertion at the back of the list.",37,null],[11,"drop","","",37,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"next_back","","",35,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"next_back","","",38,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",38,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",38,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",37,null],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"partial_cmp","","",37,null],[11,"cmp","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"hash","","",37,null],[11,"make_place","","",39,null],[11,"pointer","","",39,null],[11,"finalize","","",39,null],[11,"make_place","","",40,null],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"start","core::ops","",41,null],[11,"end","","",42,null],[11,"start","","",43,null],[11,"end","","",43,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"borrow","collections::string","",45,null],[11,"fmt","core::str::pattern","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"haystack","","",47,null],[11,"next","","",47,null],[11,"next_match","","",47,null],[11,"next_reject","","",47,null],[11,"next_back","","",47,null],[11,"next_match_back","","",47,null],[11,"next_reject_back","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"haystack","","",48,null],[11,"next","","",48,null],[11,"next_match","","",48,null],[11,"next_reject","","",48,null],[11,"next_back","","",48,null],[11,"next_match_back","","",48,null],[11,"next_reject_back","","",48,null],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"haystack","","",49,null],[11,"next","","",49,null],[11,"next_match","","",49,null],[11,"next_reject","","",49,null],[11,"next_back","","",49,null],[11,"next_match_back","","",49,null],[11,"next_reject_back","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"haystack","","",50,null],[11,"next","","",50,null],[11,"next_match","","",50,null],[11,"next_back","","",50,null],[11,"next_match_back","","",50,null],[11,"cmp","collections::string","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"new","","Creates a new empty `String`.",45,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",45,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",45,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",45,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",45,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",45,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",45,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",45,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",45,null],[11,"as_str","","Extracts a string slice containing the entire string.",45,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",45,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",45,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",45,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",45,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",45,null],[11,"push","","Appends the given `char` to the end of this `String`.",45,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",45,null],[11,"truncate","","Shortens this `String` to the specified length.",45,null],[11,"pop","","Removes the last character from the string buffer and returns it.",45,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",45,null],[11,"insert","","Inserts a character into this `String` at a byte position.",45,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",45,null],[11,"len","","Returns the length of this `String`, in bytes.",45,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",45,null],[11,"clear","","Truncates this `String`, removing all contents.",45,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",45,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",45,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",51,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",51,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",45,null],[11,"clone_from","","",45,null],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::string","",45,null],[11,"ne","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",45,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"add","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"eq","","",53,null],[11,"as_ref","","",45,null],[11,"as_ref","","",45,null],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",32,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",45,null],[11,"write_str","","",45,null],[11,"write_char","","",45,null],[11,"drop","","",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"clone","collections::vec","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",32,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",55,null],[11,"size_hint","","",55,null],[11,"count","","",55,null],[11,"next_back","","",55,null],[11,"clone","","",55,null],[11,"drop","","",55,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"drop","","",56,null],[11,"clone","collections::vec_deque","",57,null],[11,"drop","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",57,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",57,null],[11,"swap","","Swaps elements at indices `i` and `j`.",57,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",57,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",57,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",57,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",57,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",57,null],[11,"iter","","Returns a front-to-back iterator.",57,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",57,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"len","","Returns the number of elements in the `VecDeque`.",57,null],[11,"is_empty","","Returns true if the buffer contains no elements",57,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",57,null],[11,"clear","","Clears the buffer, removing all values.",57,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",57,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",57,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",57,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",57,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",57,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",57,null],[11,"push_front","","Inserts an element first in the sequence.",57,null],[11,"push_back","","Appends an element to the back of a buffer",57,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",57,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",57,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",57,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",57,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",57,null],[11,"split_off","","Splits the collection into two at the given index.",57,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",57,null],[11,"retain","","Retains only the elements specified by the predicate.",57,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",57,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"clone","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"drop","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"eq","","",57,null],[11,"partial_cmp","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",57,null],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"fmt","","",57,null],[11,"from","","",57,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",62,null],[11,"ne","","",62,null],[11,"hash","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"clone","alloc::boxed","",63,null],[11,"pointer","","",64,null],[11,"make_place","","",64,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",64,null],[11,"finalize","","",65,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",63,null],[11,"drop","","",64,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",65,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",65,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",65,null],[11,"clone","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"partial_cmp","","",65,null],[11,"lt","","",65,null],[11,"le","","",65,null],[11,"ge","","",65,null],[11,"gt","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"from","","",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"deref","","",65,null],[11,"deref_mut","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"call_once","","",65,null],[11,"call_once","","",65,null],[11,"clone","","",65,null],[11,"borrow","","",65,null],[11,"borrow_mut","","",65,null],[11,"as_ref","","",65,null],[11,"as_mut","","",65,null],[11,"deref","regex_syntax","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"new","","Create a new builder for configuring expression parsing.",68,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",68,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",68,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",68,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",68,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",68,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",68,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",68,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",68,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",68,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",66,null],[11,"into_iter","","",66,null],[11,"new","","Create a new class from an existing set of ranges.",66,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",66,null],[11,"remove","","Removes the given character from the class if it exists.",66,null],[11,"negate","","Negates the character class.",66,null],[11,"case_fold","","Apply case folding to this character class.",66,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",67,null],[11,"remove","","Removes the given byte from the class if it exists.",67,null],[11,"negate","","Negates the byte class.",67,null],[11,"case_fold","","Apply case folding to this byte class.",67,null],[11,"deref","","",67,null],[11,"into_iter","","",67,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",66,null],[11,"fmt","","",0,null],[11,"fmt","","",67,null],[11,"fmt","","",1,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",69,null],[11,"kind","","Returns the type of the regex parse error.",69,null],[11,"description","","",69,null],[11,"fmt","","",69,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
